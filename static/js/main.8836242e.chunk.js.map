{"version":3,"sources":["common/Constants.js","components/Disclaimer.jsx","components/UsageGuide.jsx","components/ProjectionInputs.jsx","common/DateHelpers.js","common/Formatters.js","components/ProjectionESOP.jsx","components/Projection401k.jsx","components/ProjectionCombined.jsx","stores/index.js","views/App.jsx","common/Equations.js","common/Defaults.js","stores/CalculatorStore.js","index.jsx"],"names":["titleConstants","COMBINED_INVESTMENTS","ESOP_GROWTH","USAGE_GUIDE","INVESTMENT_REFERENCES","ONLY_401K","observer","props","store","handleClose","acknowledgedDisclaimer","Dialog","data-testid","disableBackdropClick","disableEscapeKeyDown","open","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","variant","color","autoFocus","disableFocusRipple","months","UsageGuide","d","Date","monthName","getMonth","align","background-color","Typography","href","rel","target","toLowerCase","inputIds","useState","averageAnnual401kFeesErr","setAverageAnnual401kFeesErr","averageAnnual401kGrowthErr","setAverageAnnual401kGrowthErr","averageEmployerESOPContributionErr","setAverageEmployerESOPContributionErr","averageRaiseErr","setAverageRaiseErr","averageShareGrowthErr","setAverageShareGrowthErr","currentEmployeeAgeErr","setCurrentEmployeeAgeErr","employee401kContributionErr","setEmployee401kContributionErr","starting401kBalanceErr","setStarting401kBalanceErr","startingESOPAccountValueErr","setStartingESOPAccountValueErr","startingSalaryErr","setSartingSalaryErr","yearsToCalculateErr","setYearsToCalculateErr","setErrs","handleInput","e","preventDefault","inputValue","Number","value","showErr","toString","min","max","handleInputsUpdate","onSubmit","disabledKeyboardNavigation","dropdownMode","maxDate","initYear","minDate","onChange","date","scrollableYearDropdown","selected","startDate","showMonthDropdown","showYearDropdown","element","TextField","debounceTimeout","error","helperText","type","label","startingSalary","InputProps","inputProps","step","fullWidth","averageRaise","selectedTabName","Constants","style","startingESOPAccountValue","averageEmployerESOPContribution","averageShareGrowth","currentEmployeeAge","starting401kBalance","employee401kContribution","averageAnnual401kGrowth","averageAnnual401kFees","yearsToCalculate","getPlanEntryDate","entryYear","getFullYear","entryDay","getDate","entryMonth","getContributionPercentage","entryDate","year","contributionPercentage","getVestingDayByStartDate","daysToVest","getDay","result","setDate","getVestingDayByYear","vestingDay","janFirst","getYearsOfService","startYear","serviceYears","lastVestingDate","setHours","numFormatter","Intl","NumberFormat","currency","minimumFractionDigits","dateFormatter","DateTimeFormat","remainingYearsToVest","vestedValues","vestedPercentages","i","dataPointsESOP","length","vestedYears","endOfYearPoint","x","y","push","Math","trunc","vestingPoint","format","data","datasets","fill","steppedLine","backgroundColor","borderColor","pointRadius","pointHoverRadius","options","maintainAspectRatio","responsive","tooltips","mode","intersect","callbacks","tooltipItems","_data","itemLabel","datasetIndex","index","title","scales","xAxes","ticks","beginAtZero","time","displayFormats","day","week","month","quarter","parser","distribution","yAxes","callback","_index","_values","redraw","lineTension","dataPoints401k","combinedValuePoints","useStores","React","useContext","MobXProviderContext","useStyles","makeStyles","flexRoot","textAlign","padding","borderWidth","display","flexFlow","height","flexHeader","flex","flexContent","innerFlex","width","justifyContent","inputs","boxSizing","minWidth","maxWidth","verticalAlign","paddingLeft","paddingRight","borderStyle","overflowY","charts","flexGrow","minHeight","maxHeight","chartBox","footer","marginTop","classes","calculatorStore","theme","createMuiTheme","palette","accent","typography","useNextVariants","className","Tabs","selectedTab","handleTabChange","indicatorColor","textColor","scrollButtons","tabs","map","item","Tab","disableRipple","getYearCount","count","round","decimals","generate401kGrowthData","initValue","currentSalary","avgGrowth","avgFees","totalYears","currentAge","dataPoints","annualReturn","compoundingPeriods","years","compoundPerYear","salary","calculatedAge","maxContribution","apy","firstPaycheckIndex","lastBalance","j","rawContribution","now","CalculatorStore","InitialValues","setting","event","this","initSalary","avgRaise","contribution","inputInitYear","generateESOPGrowthData","decorate","computed","observable","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8836242e.chunk.js","sourcesContent":["const COMBINED_INVESTMENTS = \"Combined ESOP + 401(k) Growth\";\nconst ESOP_GROWTH = \"ESOP Growth\";\nconst USAGE_GUIDE = \"Usage Guide\";\nconst INVESTMENT_REFERENCES = \"Investment References\";\nconst ONLY_401K = \"401(k) Growth\";\n\nconst titleConstants = { COMBINED_INVESTMENTS, ESOP_GROWTH, USAGE_GUIDE, INVESTMENT_REFERENCES, ONLY_401K };\nexport default titleConstants;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport PropTypes from \"prop-types\";\nimport { observer } from \"mobx-react\";\n\n/**\n *\n * @param {*} props - passed in properties\n * @returns {Disclaimer} - A disclaimer which must be acknowledged before using the calculator\n */\nfunction Disclaimer(props) {\n  const { store } = props;\n\n  const handleClose = () => {\n    store.acknowledgedDisclaimer = true;\n  };\n\n  return (\n    <div>\n      <Dialog\n        data-testid=\"disclaimer\"\n        disableBackdropClick\n        disableEscapeKeyDown\n        open={!store.acknowledgedDisclaimer}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">Disclaimer</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            This is a simple mathematical calculator. It is not a guarantee of\n            future returns. All investments (including the ESOP and 401(k)) are\n            subject to risk. The potential for loss (or gains) may be greater\n            than calculated. This calculator is not intended to provide tax,\n            investment, or legal advice.\n            <br />\n            <br />\n            Please also keep in mind the following:\n            <br />\n            - Results using the calculator may change over time based on your\n            inputs and as we update our assumptions.\n            <br />\n            - Our assumptions may not be correct or accurately project market\n            conditions, inflation, or tax rates.\n            <br />\n            - The calculator also does not take into account IRS or plan\n            contribution limits, which may result in an overestimate of\n            benefits.\n            <br />\n            - The calculator does not take into account taxes you may owe or\n            that may be withheld at distribution. These will affect how much of\n            the benefits you actually receive.\n            <br />\n            - The operation of the plans and the benefits to which you (or your\n            beneficiaries) may be entitled will be governed solely by the terms\n            of the official plan documents. To the extent that any of the\n            information in this calculator or any information you receive orally\n            is inconsistent with the official plan documents, the provisions set\n            forth in the plan documents will govern in all cases.\n            <br />\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            data-testid=\"acknowledge-button\"\n            onClick={handleClose}\n            variant=\"contained\"\n            color=\"primary\"\n            autoFocus\n            disableFocusRipple\n          >\n            Acknowledge\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nDisclaimer.propTypes = {\n  store: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types\n};\n\nexport default observer(Disclaimer);\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nconst months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\n\n/**\n * @returns {UsageGuide} - a component displaying information about how the calculator should be\n * used\n */\nfunction UsageGuide() {\n  const d = new Date();\n  const monthName = months[d.getMonth()];\n\n  return (\n    <div align=\"left\" background-color=\"#F7F7F8\" data-testid=\"usage-guide\">\n\n      <Typography variant=\"h5\">Using The Tool</Typography>\n      <br />\n        <Typography variant=\"body2\" color=\"textPrimary\">\n          This calculator is a tool for modeling possible ESOP and 401(k) growth using the\n          provided input values. Values can be set using the inputs on the left, and then the\n          visual growth calculations can be seen by selecting a tab above to view them separately or\n          in a combined graph. The ESOP Growth chart will also include your ESOP entry data and\n          vesting percentages, if applicable.\n        </Typography>\n        <br />\n      <Typography variant=\"h5\">Privacy</Typography>\n      <br />\n        <Typography variant=\"body2\" color=\"textPrimary\">\n          This calculator is completely self-contained. No data is transmitted to the server or\n          stored in the browser after it is closed. No metrics are collected on entered values.\n          The Current Age field is only used to provide more accurate calculations based on 2021\n          contribution limits. It is used to raise the 401(k) contribution limit the year an\n          employee turns 50, from $19,500 to $26,000.\n        </Typography>\n      <br />\n      <Typography variant=\"h5\">How It Works</Typography>\n      <br />\n      <Typography variant=\"body2\" color=\"textPrimary\">\n        Calculations are made as simple interest plus contributions. ESOP account values are\n        contributed to and compounded annually, 401(k) account values are contributed to and\n        compounded monthly.\n      </Typography>\n      <br />\n      <Typography variant=\"body2\" color=\"textPrimary\">\n        This calculator assumes that an employee started as full time employee on the given start\n        date and will be 18 years of age by the time they have completed one year of employment,\n        and then calculates their ESOP entry date and vesting dates accordingly. Based on\n        8 hours per working day, employees will enter the ESOP on the quarterly entry date\n        (January 1st, April 1st, July 1st, October 1st) following their fulfillment of the\n        following criteria:\n      </Typography>\n      <div>\n        <ul>\n          <li><Typography variant=\"body2\" color=\"textPrimary\">US Employee</Typography></li>\n          <li><Typography variant=\"body2\" color=\"textPrimary\">Age 18 or older</Typography></li>\n          <li>\n            <Typography variant=\"body2\" color=\"textPrimary\">\n              Have completed one year of employment and been paid for at least 1,000 hours</Typography>\n          </li>\n        </ul>\n      </div>\n      <br />\n      <Typography variant=\"h5\">Chart Usage Tips</Typography>\n      <div>\n        <ul>\n          <li>\n            <Typography variant=\"body2\" color=\"textPrimary\">\n              Hovering over a specific point on the chart will display the specific value(s).\n            </Typography>\n          </li>\n          <li>\n            <Typography variant=\"body2\" color=\"textPrimary\">\n              Clicking on the legend entry for a line will toggle the visibility of the line.\n            </Typography>\n          </li>\n        </ul>\n      </div>\n      <br />\n      <Typography variant=\"h5\">How Do I Choose An Average Return?</Typography>\n      <br />\n      <Typography variant=\"body2\" color=\"textPrimary\">\n        Accurately projecting future economic growth is beyond the scope of this tool.\n        This tool is best used to assess various possible scenarios and then consider what impact\n        that would have on planning your retirement. It is recommended to try a range of average\n        return values to help visualize future growth potential.  Here are some references that\n        may assist you, and provide a frame of reference for more conservative or aggressive\n        calculations:\n      </Typography>\n      <div >\n        <ul>\n          <li>\n            <Typography variant=\"body2\" color=\"textPrimary\">\n              <a\n                href=\"https://www.nceo.org/articles/research-employee-ownership-corporate-performance\"\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                National Center for Employee Ownership: Research On ESOP Performance\n              </a>\n              </Typography>\n          </li>\n          <li>\n            <Typography variant=\"body2\" color=\"textPrimary\">\n              <a\n                href=\"https://personal.vanguard.com/us/insights/saving-investing/model-portfolio-allocations\"\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                Vanguard Portfolio Allocation Models\n              </a>\n            </Typography>\n          </li>\n          <li>\n            <Typography variant=\"body2\" color=\"textPrimary\">\n              <a\n                href={`https://advisors.vanguard.com/insights/article/marketperspectives${  monthName.toLowerCase()  }2021`}\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                {`Vanguard Market Perspective (${  monthName  } 2021)`}\n              </a>\n            </Typography>\n          </li>\n        </ul>\n      </div>\n      <br />\n      <Typography variant=\"h5\">401(k) Fees?</Typography>\n      <br />\n      <Typography variant=\"body2\" color=\"textPrimary\">\n        There are administration overhead fees, and each individual fund will have its own fund\n        management fees. For index funds, this is typically very low (less than 2 tenths of a\n        percent), but it can be significantly higher for actively managed funds. A more detailed\n        value to use for calculations can be determined by referencing your current fund balance\n        and aggregating the percentage of various fees at your target asset allocation. Please\n        contact your 401(k) administrator for more information regarding your 401(k) fees.\n      </Typography>\n      <br />\n      <Typography variant=\"h5\">Questions?</Typography>\n      <br />\n      <Typography variant=\"body2\" color=\"textPrimary\">\n        For more information, please contact your ESOP administrator.\n      </Typography>\n    </div>\n  );\n}\n\nexport default UsageGuide;\n","import React, { useState } from \"react\";\nimport { TextField, Typography } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { observer } from \"mobx-react\";\nimport { DebounceInput } from 'react-debounce-input';\n\nimport Constants from \"../common/Constants\";\n\nconst inputIds = {\n  averageAnnual401kFees: \"averageAnnual401kFees\",\n  averageAnnual401kGrowth: \"averageAnnual401kGrowth\",\n  averageEmployerESOPContribution: \"averageEmployerESOPContribution\",\n  averageRaise: \"averageRaise\",\n  averageShareGrowth: \"averageShareGrowth\",\n  currentEmployeeAge: \"currentEmployeeAge\",\n  employee401kContribution: \"employee401kContribution\",\n  starting401kBalance: \"starting401kBalance\",\n  startingESOPAccountValue: \"startingESOPAccountValue\",\n  startingSalary: \"startingSalary\",\n  yearsToCalculate: \"yearsToCalculate\"\n};\n\n/**\n * @param {object} props - Input properties to the functional component\n * @returns {ProjectionInputs} - The projection inputs object to render\n */\nfunction ProjectionInputs(props) {\n\n  const { store } = props;\n\n  const [averageAnnual401kFeesErr, setAverageAnnual401kFeesErr] = useState(false);\n  const [averageAnnual401kGrowthErr, setAverageAnnual401kGrowthErr] = useState(false);\n  const [averageEmployerESOPContributionErr, setAverageEmployerESOPContributionErr] = useState(false);\n  const [averageRaiseErr, setAverageRaiseErr] = useState(false);\n  const [averageShareGrowthErr, setAverageShareGrowthErr] = useState(false);\n  const [currentEmployeeAgeErr, setCurrentEmployeeAgeErr] = useState(false);\n  const [employee401kContributionErr, setEmployee401kContributionErr] = useState(false);\n  const [starting401kBalanceErr, setStarting401kBalanceErr] = useState(false);\n  const [startingESOPAccountValueErr, setStartingESOPAccountValueErr] = useState(false);\n  const [startingSalaryErr, setSartingSalaryErr] = useState(false);\n  const [yearsToCalculateErr, setYearsToCalculateErr] = useState(false);\n\n  const setErrs = {};\n  setErrs[inputIds.averageAnnual401kFees] = setAverageAnnual401kFeesErr;\n  setErrs[inputIds.averageAnnual401kGrowth] = setAverageAnnual401kGrowthErr;\n  setErrs[inputIds.averageEmployerESOPContribution] = setAverageEmployerESOPContributionErr;\n  setErrs[inputIds.averageRaise] = setAverageRaiseErr;\n  setErrs[inputIds.averageShareGrowth] = setAverageShareGrowthErr;\n  setErrs[inputIds.currentEmployeeAge] = setCurrentEmployeeAgeErr;\n  setErrs[inputIds.employee401kContribution] = setEmployee401kContributionErr;\n  setErrs[inputIds.starting401kBalance] = setStarting401kBalanceErr;\n  setErrs[inputIds.startingESOPAccountValue] = setStartingESOPAccountValueErr;\n  setErrs[inputIds.startingSalary] = setSartingSalaryErr;\n  setErrs[inputIds.yearsToCalculate] = setYearsToCalculateErr;\n\n  const handleInput = (e) => {\n    e.preventDefault();\n    const inputValue = Number(e.target.value);\n    const showErr = setErrs[e.target.id.toString()];\n    if (e.target.value === \"\") {\n      showErr(true);\n    } else if (inputValue < Number(e.target.min)) {\n      showErr(true);\n    } else if (inputValue > Number(e.target.max)) {\n      showErr(true);\n    } else {\n      store.handleInputsUpdate(e.target.id.toString(), inputValue);\n      showErr(false);\n    }\n  };\n\n  const handleStartDateChange = (date) => {\n    store.handleInputsUpdate(\"startDate\", date);\n  };\n\n  return (\n    <>\n      <form onSubmit={handleInput}>\n        <>\n          <Typography variant=\"caption\" color=\"textSecondary\">\n            Employee Start Date (FT)\n          </Typography>\n          <br />\n          <DatePicker\n            data-testid=\"startDatePicker\"\n            disabledKeyboardNavigation\n            dropdownMode=\"select\"\n            id=\"startDate\"\n            maxDate={new Date(store.initYear + 1, 11, 31)}\n            minDate={new Date(1982, 0, 1)}\n            onChange={handleStartDateChange}\n//            onSelect={this.handleSelect}\n            scrollableYearDropdown\n            selected={store.startDate}\n            showMonthDropdown\n            showYearDropdown\n          />\n          <br />\n          <br />\n          <DebounceInput\n            element={TextField}\n            debounceTimeout={300}\n            data-testid={inputIds.startingSalary}\n            error={startingSalaryErr}\n            helperText={startingSalaryErr ? \"Please enter a value between 0 and 1000000\" : \"\"}\n            id={inputIds.startingSalary}\n            type=\"number\"\n            label=\"Employee Salary ($)\"\n            value={startingSalaryErr ? \"\" : store.startingSalary.toString()}\n            InputProps={{\n              inputProps: {\n                min: 0,\n                max: 1000000,\n                step: 1000,\n              },\n            }}\n            onChange={handleInput}\n            fullWidth\n          />\n          <br />\n          <Typography variant=\"caption\" color=\"textSecondary\">\n            <i>Current employee salary.</i>\n          </Typography>\n          <br />\n          <br />\n          <DebounceInput\n              element={TextField}\n              debounceTimeout={300}\n              data-testid={inputIds.averageRaise}\n              error={averageRaiseErr}\n              helperText={averageRaiseErr ? \"Please enter a value between 0 and 10\" : \"\"}\n              id={inputIds.averageRaise}\n              type=\"number\"\n              label=\"Average Annual Raise (%)\"\n              value={averageRaiseErr ? \"\" : store.averageRaise.toString()}\n              InputProps={{ inputProps: { min: 0, max: 10 } }}\n              onChange={handleInput}\n              fullWidth\n            />\n            <br />\n            <Typography variant=\"caption\" color=\"textSecondary\">\n              <i>Average annual raise to apply to the employee&apos;s salary</i>\n            </Typography>\n            <br />\n            <br />\n        </>\n        {store.selectedTabName !== Constants.ONLY_401K && (\n          <>\n            <DebounceInput\n              element={TextField}\n              debounceTimeout={300}\n              data-testid={inputIds.startingESOPAccountValue}\n              error={startingESOPAccountValueErr}\n              helperText={startingESOPAccountValueErr ? \"Please enter a value between 0 and 10000000\" : \"\"}\n              id={inputIds.startingESOPAccountValue}\n              type=\"number\"\n              style={{\"whiteSpace\": \"nowrap\"}}\n              label=\"Current ESOP Account Balance ($)\"\n              value={startingESOPAccountValueErr ? \"\" : store.startingESOPAccountValue.toString()}\n              InputProps={{ inputProps: { min: 0, max: 10000000, step: 100 } }}\n              onChange={handleInput}\n              fullWidth\n            />\n            <br />\n            <Typography variant=\"caption\" color=\"textSecondary\">\n              <i>\n                Employee ESOP account balance from the current report\n              </i>\n            </Typography>\n            <br />\n            <br />\n            <DebounceInput\n              element={TextField}\n              debounceTimeout={300}\n              data-testid={inputIds.averageEmployerESOPContribution}\n              error={averageEmployerESOPContributionErr}\n              helperText={averageEmployerESOPContributionErr ? \"Please enter a value between 5 and 15\" : \"\"}\n              id={inputIds.averageEmployerESOPContribution}\n              type=\"number\"\n              label=\"Annual Employer Contribution (%)\"\n              value={averageEmployerESOPContributionErr ? \"\" : store.averageEmployerESOPContribution}\n              InputProps={{ inputProps: { min: 5, max: 15 } }}\n              onChange={handleInput}\n              fullWidth\n            />\n            <br />\n            <Typography variant=\"caption\" color=\"textSecondary\">\n              <i>\n                Percentage of employee&apos;s annual salary contributed by the employer\n                to the ESOP.\n              </i>\n            </Typography>\n            <br />\n            <br />\n            <DebounceInput\n              element={TextField}\n              debounceTimeout={300}\n              data-testid={inputIds.averageShareGrowth}\n              error={averageShareGrowthErr}\n              helperText={averageShareGrowthErr ? \"Please enter a value between 0 and 20\" : \"\"}\n              id={inputIds.averageShareGrowth}\n              type=\"number\"\n              style={{\"whiteSpace\": \"nowrap\"}}\n              label=\"Average Annual ESOP Growth (%)\"\n              value={averageShareGrowthErr ? \"\" : store.averageShareGrowth.toString()}\n              InputProps={{ inputProps: { min: 0, max: 20 } }}\n              onChange={handleInput}\n              fullWidth\n            />\n            <br />\n            <Typography variant=\"caption\" color=\"textSecondary\">\n              <i>\n                Average year-over-year return on an employee&apos;s ESOP\n                account.\n              </i>\n            </Typography>\n            <br />\n            <br />\n          </>\n        )}\n        {store.selectedTabName !== Constants.ESOP_GROWTH && (\n          <>\n            <DebounceInput\n              element={TextField}\n              debounceTimeout={300}\n              data-testid={inputIds.currentEmployeeAge}\n              error={currentEmployeeAgeErr}\n              helperText={currentEmployeeAgeErr ? \"Please enter a value between 18 and 120\" : \"\"}\n              id={inputIds.currentEmployeeAge}\n              type=\"number\"\n              label=\"Current Age\"\n              value={currentEmployeeAgeErr ? \"\" : store.currentEmployeeAge}\n              InputProps={{ inputProps: { min: 18, max: 120 } }}\n              onChange={handleInput}\n              fullWidth\n            />\n            <Typography variant=\"caption\" color=\"textSecondary\">\n              <i>Current employee age.</i>\n            </Typography>\n            <br />\n            <br />\n            <DebounceInput\n              element={TextField}\n              debounceTimeout={300}\n              data-testid={inputIds.starting401kBalance}\n              error={starting401kBalanceErr}\n              helperText={starting401kBalanceErr ? \"Please enter a value between 0 and 10000000\" : \"\"}\n              id={inputIds.starting401kBalance}\n              type=\"number\"\n              label=\"Starting 401(k) Balance ($)\"\n              value={starting401kBalanceErr ? \"\" : store.starting401kBalance.toString()}\n              InputProps={{\n                inputProps: { min: 0, max: 10000000, step: 1000 },\n              }}\n              onChange={handleInput}\n              fullWidth\n            />\n            <br />\n            <Typography variant=\"caption\" color=\"textSecondary\">\n              <i>\n                Employee&apos;s 401(k) account balance as of January 1st\n                of the current year.\n              </i>\n            </Typography>\n            <br />\n            <br />\n            <DebounceInput\n              element={TextField}\n              debounceTimeout={300}\n              data-testid={inputIds.employee401kContribution}\n              error={employee401kContributionErr}\n              helperText={employee401kContributionErr ? \"Please enter a value between 0 and 100\" : \"\"}\n              id={inputIds.employee401kContribution}\n              type=\"number\"\n              label=\"Employee 401(k) Contribution (%)\"\n              value={employee401kContributionErr ? \"\" : store.employee401kContribution.toString()}\n              InputProps={{ inputProps: { min: 0, max: 100, step: 1 } }}\n              onChange={handleInput}\n              fullWidth\n            />\n            <br />\n            <Typography variant=\"caption\" color=\"textSecondary\">\n              <i>\n                Percentage of their salary that the employee contributes to their 401(k)\n                account per year, up to their age-determined max.\n              </i>\n            </Typography>\n            <br />\n            <br />\n            <DebounceInput\n              element={TextField}\n              debounceTimeout={300}\n              data-testid={inputIds.averageAnnual401kGrowth}\n              error={averageAnnual401kGrowthErr}\n              helperText={averageAnnual401kGrowthErr ? \"Please enter a value between 0 and 20\" : \"\"}\n              id={inputIds.averageAnnual401kGrowth}\n              type=\"number\"\n              style={{\"whiteSpace\": \"nowrap\"}}\n              label=\"Average Annual 401(k) Growth (%)\"\n              value={averageAnnual401kGrowthErr ? \"\" : store.averageAnnual401kGrowth.toString()}\n              InputProps={{ inputProps: { min: 0, max: 20 } }}\n              onChange={handleInput}\n              fullWidth\n            />\n            <br />\n            <Typography variant=\"caption\" color=\"textSecondary\">\n              <i>\n                Average year-over-year return on an employee&apos;s 401(k)\n                account.\n              </i>\n            </Typography>\n            <br />\n            <br />\n            <DebounceInput\n              element={TextField}\n              debounceTimeout={300}\n              data-testid={inputIds.averageAnnual401kFees}\n              error={averageAnnual401kFeesErr}\n              helperText={averageAnnual401kFeesErr ? \"Please enter a value between 0 and 2\" : \"\"}\n              id={inputIds.averageAnnual401kFees}\n              type=\"number\"\n              label=\"Average Annual 401(k) Fees (%)\"\n              value={averageAnnual401kFeesErr ? \"\" : store.averageAnnual401kFees.toString()}\n              InputProps={{ inputProps: { min: 0, max: 2, step: 0.01 } }}\n              onChange={handleInput}\n              fullWidth\n            />\n            <br />\n            <Typography variant=\"caption\" color=\"textSecondary\">\n              <i>\n                401k administration and fund fees. These are subtracted from\n                the average rate of return.\n              </i>\n            </Typography>\n            <br />\n            <br />\n          </>\n        )}\n        <DebounceInput\n          element={TextField}\n          debounceTimeout={300}\n          data-testid={inputIds.yearsToCalculate}\n          error={yearsToCalculateErr}\n          helperText={yearsToCalculateErr ? \"Please enter a value between 1 and 60\" : \"\"}\n          id={inputIds.yearsToCalculate}\n          type=\"number\"\n          label=\"Years To Calculate\"\n          value={yearsToCalculateErr ? \"\" : store.yearsToCalculate}\n          InputProps={{ inputProps: { min: 1, max: 60 } }}\n          onChange={handleInput}\n          fullWidth\n        />\n        <Typography variant=\"caption\" color=\"textSecondary\">\n          <i>Years of growth to calculate.</i>\n        </Typography>\n        <br />\n      </form>\n    </>\n  );\n}\n\nProjectionInputs.propTypes = {\n  store: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types\n};\n\nexport default observer(ProjectionInputs);\n","/**\n * @param {string} startDate - employee start date\n * @returns {Date} the employee's ESOP entry date, assuming employee is 18 on this date.\n */\n function getPlanEntryDate(startDate) {\n  let entryYear = startDate.getFullYear() + 1;\n  const entryDay = startDate.getDate();\n  let entryMonth = startDate.getMonth();\n\n  // Possible entry dates are January 1st, April 1st, July 1st, and October 1st.\n  // IMPORTANT: Months are zero-based.\n  if (entryDay > 1 || entryMonth > 0) {\n    if (entryMonth < 3 || (entryMonth === 3 && entryDay === 1)) {\n      entryMonth = 3;\n    } else if (entryMonth < 6 || (entryMonth === 6 && entryDay === 1)) {\n      entryMonth = 6;\n    } else if (entryMonth < 9 || (entryMonth === 9 && entryDay === 1)) {\n      entryMonth = 9;\n    } else {\n      // Go to January 1 of the following year\n      entryMonth = 0;\n      entryYear += 1;\n    }\n  }\n  return new Date(entryYear, entryMonth, 1);\n}\n\n/**\n * @param {Date} entryDate - employee's ESOP Plan entry date\n * @param {number} year - year to use for contribution percentage calculation\n * @returns {number} The contribution percentage for the given year\n */\nfunction getContributionPercentage(entryDate, year) {\n  const entryYear = entryDate.getFullYear();\n  const entryMonth = entryDate.getMonth();\n\n  let contributionPercentage = 0;\n\n  // Entry date is before current year\n  if (entryYear < year) {\n    contributionPercentage = 1;\n  }\n  if (entryYear === year) {\n    switch (entryMonth) {\n      case 3:\n        // April 1st, so we'll just do three quarters of the regular contribution\n        contributionPercentage = 0.75;\n        break;\n      case 6:\n        // July 1st, so we'll just do half of the regular contribution\n        contributionPercentage = 0.5;\n        break;\n      case 9:\n        // October 1st, so we'll just do a quarter of the regular contribution\n        contributionPercentage = 0.25;\n        break;\n      default:\n        // January 1st, full contribution\n        contributionPercentage = 1;\n        break;\n    }\n  }\n  return contributionPercentage;\n}\n\n/**\n * @param {Date} startDate - employee start date; assumes valid for the year\n * @returns {Date} the employee's vesting date for a given year\n */\nfunction getVestingDayByStartDate(startDate) {\n  let daysToVest;\n\n  if (startDate.getDay() === 1) { // started on a Monday\n    daysToVest = 24 * 7 + 4\n  } else {\n    daysToVest = 24 * 7 + 6\n  };\n\n  const result = new Date(startDate);\n  result.setDate(result.getDate() + daysToVest);\n  return result;\n}\n\n/**\n * @param {number} year - year to determine vesting date of.\n * @returns {Date} the specific day at which a regular employee will reach 1000 hours.\n */\n function getVestingDayByYear(year) {\n  let vestingDay = 24;\n  const janFirst = new Date(year, 0, 1);\n  if (year % 4 === 0)  { // leap year\n    if (janFirst.getDay() === 1) { // 1: Monday\n      vestingDay = 21\n    } else if (janFirst.getDay() === 0) { // 1: Sunday)\n      vestingDay = 22;\n    } else {\n      vestingDay = 23;\n    }\n  }\n  else if (janFirst.getDay() === 1) { // 1: Monday\n      vestingDay = 22\n  } else if (janFirst.getDay() === 0) { // 1: Sunday)\n      vestingDay = 23;\n  }\n\n  return new Date(year, 5, vestingDay);\n}\n\n/**\n * @param {Date} startDate - Employee start date\n * @param {number} year - Year to use to determine employee vesting schedule\n * @returns {number} the employee's total years of service\n */\nfunction getYearsOfService(startDate, year) {\n  const startYear = startDate.getFullYear();\n  let serviceYears = 0;\n\n\n  // If the December 15th is a Sunday-Thursday, employee must have started by June 24th to \n  // receive a vesting year (1000 paid hours) by their December 20th paycheck.\n  let lastVestingDate = new Date(startYear, 5, 24);\n  if (new Date(startYear, 11, 15).getDay() === 6) {\n    // If December 15th was a Saturday, they need to have started by June 25th\n    lastVestingDate = new Date(startYear, 5, 25);\n  } else if (new Date(startYear, 11, 15).getDay() === 5) {\n      // If December 15th was a Friday, they need to have started by June 26th\n      lastVestingDate = new Date(startYear, 5, 26);\n  }\n\n  lastVestingDate.setHours(0,0,0,0);\n  startDate.setHours(0,0,0,0);\n\n  if (startYear <= year) {\n    serviceYears = year - startYear;\n\n    if (startDate <= lastVestingDate) {\n      serviceYears += 1;\n    }\n  }\n  return serviceYears;\n}\n\nexport { getContributionPercentage, getPlanEntryDate, getVestingDayByStartDate, getVestingDayByYear, getYearsOfService };\n","const numFormatter = Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 0 });\nconst dateFormatter = Intl.DateTimeFormat('en-US');\n\nexport { numFormatter, dateFormatter };","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport PropTypes from \"prop-types\";\nimport { observer } from \"mobx-react\";\n\nimport {\n  getYearsOfService,\n  getPlanEntryDate,\n  getVestingDayByStartDate,\n  getVestingDayByYear\n} from \"../common/DateHelpers\";\nimport { numFormatter, dateFormatter } from \"../common/Formatters\";\n\n/**\n *\n * @param {any} props - props passed to the object\n * @returns {ProjectionESOP} - An ESOP Projection display\n */\nfunction ProjectionESOP(props) {\n  const { store } = props;\n\n  const remainingYearsToVest = 7 - getYearsOfService(store.startDate, store.initYear);\n  const vestedValues = [];\n  const vestedPercentages = [];\n  for (\n    let i = 0;\n    i <= remainingYearsToVest && i < store.dataPointsESOP.length;\n    i += 1\n  ) {\n    const vestedYears = getYearsOfService(\n      store.startDate,\n      store.initYear + i - 1\n    );\n    let endOfYearPoint = {};\n    endOfYearPoint = { x: store.dataPointsESOP[i].x };\n    if (vestedYears < 2) {\n      endOfYearPoint.y = 0;\n      vestedPercentages.push(0);\n    } else {\n      endOfYearPoint.y = Math.trunc(\n        store.dataPointsESOP[i].y * ((vestedYears - 1) * 0.2)\n      );\n      vestedPercentages.push((vestedYears - 1) * 20);\n    }\n    vestedValues.push(endOfYearPoint);\n\n    if (i === 0) {\n      // Check if they vested their first year\n      if (getYearsOfService(store.startDate, store.initYear) === 1) {\n        const vestingPoint = {};\n        vestingPoint.x = dateFormatter.format(getVestingDayByStartDate(store.startDate));\n        vestingPoint.y = 0;\n        vestedValues.push(vestingPoint);\n        vestedPercentages.push(0);\n      } else if (getYearsOfService(store.startDate, store.initYear) > 1) {\n        const vestingPoint = {};\n        vestingPoint.x = dateFormatter.format(getVestingDayByYear(store.initYear));\n        vestingPoint.y = Math.trunc(store.dataPointsESOP[i].y * ((vestedYears) * 0.2));\n        vestedValues.push(vestingPoint);\n        vestedPercentages.push(vestedYears * 20);\n      }\n    } else if (vestedYears < 6) {\n      const vestingPoint = {};\n      vestingPoint.x = dateFormatter.format(getVestingDayByYear(store.initYear + i));\n      vestingPoint.y = Math.trunc(store.dataPointsESOP[i].y * ((vestedYears) * 0.2));\n      vestedValues.push(vestingPoint);\n      vestedPercentages.push(vestedYears * 20);\n    }\n  }\n\n  const data = {\n    datasets: [\n      {\n        label: \"ESOP Account Value\",\n        fill: false,\n        steppedLine: true,\n        data: store.dataPointsESOP,\n        backgroundColor: \"#44A3FF\",\n        borderColor: \"#44A3FF\",\n      },\n    ],\n  };\n\n  if (remainingYearsToVest > 0) {\n    data.datasets[1] = {\n      label: \"Vested Value\",\n      fill: false,\n      steppedLine: true,\n      data: vestedValues,\n      backgroundColor: \"#93989D\",\n      borderColor: \"#93989D\",\n    };\n\n    if (\n      getPlanEntryDate(store.startDate) >= new Date(store.dataPointsESOP[0].x)\n    ) {\n      data.datasets[2] = {\n        label: \"Plan Entry Date\",\n        fill: false,\n        pointRadius: 5,\n        pointHoverRadius: 7,\n        data: [\n          {\n            label: \"Plan Entry Point\",\n            x: getPlanEntryDate(store.startDate),\n            y: 0,\n          },\n        ],\n        backgroundColor: \"#EE7468\",\n        borderColor: \"#EE7468\",\n      };\n    }\n  }\n\n  return (\n    <Line\n      data={data}\n      options={{\n        maintainAspectRatio: false,\n        responsive: true,\n        tooltips: {\n          mode: \"x\",\n          intersect: \"false\",\n          callbacks: {\n            // eslint-disable-next-line no-unused-vars\n            label: (tooltipItems, _data) => {\n              let itemLabel = \"\";\n              if (tooltipItems.datasetIndex === 0) {\n                itemLabel = `ESOP Account Value: ${numFormatter.format(\n                  Math.trunc(tooltipItems.value)\n                )}`;\n              } else if (tooltipItems.datasetIndex === 1) {\n                itemLabel = `Vested Value (${vestedPercentages[tooltipItems.index]}%): ${numFormatter.format(\n                  Math.trunc(tooltipItems.value)\n                )}`;\n              } else if (tooltipItems.datasetIndex === 2) {\n                itemLabel = \"Employee enters the ESOP\";\n              }\n              return itemLabel;\n            },\n            // eslint-disable-next-line no-unused-vars\n            title: (tooltipItems, _data) => {\n              return dateFormatter.format(new Date(tooltipItems[0].label));\n            },\n          },\n        },\n        scales: {\n          xAxes: [\n            {\n              ticks: {\n                beginAtZero: false,\n                min: `1/1/${store.initYear}`,\n              },\n              type: \"time\",\n              time: {\n                displayFormats: {\n                  day: \"MM/YYYY\",\n                  week: \"MM/YYYY\",\n                  month: \"MM/YYYY\",\n                  quarter: \"MM/YYYY\",\n                  year: \"YYYY\",\n                },\n                parser: \"MM/DD/YYYY\",\n              },\n              distribution: \"linear\",\n            },\n          ],\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: false,\n                // eslint-disable-next-line no-unused-vars\n                callback: (value, _index, _values) => {\n                  return numFormatter.format(value);\n                },\n              },\n            },\n          ],\n        },\n      }}\n      redraw\n    />\n  );\n}\n\nProjectionESOP.propTypes = {\n  store: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types\n};\n\nexport default observer(ProjectionESOP);\n","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport PropTypes from \"prop-types\";\nimport { observer } from \"mobx-react\";\n\nimport { numFormatter, dateFormatter } from \"../common/Formatters\";\n\n/**\n *\n * @param {*} props - Passed in properties\n * @returns {Projection401k} - Component for displaying projected 401k values\n */\nfunction Projection401k(props) {\n  const { store } = props;\n\n  const data = {\n    datasets: [\n      {\n        label: \"401(k) Balance\",\n        fill: false,\n        lineTension: 0.1,\n        data: store.dataPoints401k,\n        backgroundColor: \"#F37A0F\",\n        borderColor: \"#F37A0F\",\n      },\n    ],\n  };\n\n  return (\n    <Line\n      data={data}\n      options={{\n        maintainAspectRatio: false,\n        tooltips: {\n          mode: \"x\",\n          intersect: \"false\",\n          callbacks: {\n            // eslint-disable-next-line no-unused-vars\n            label: (tooltipItems, _data) => {\n              return `401(k) balance: ${numFormatter.format(\n                Math.trunc(tooltipItems.value)\n              )}`;\n            },\n            // eslint-disable-next-line no-unused-vars\n            title: (tooltipItems, _data) => {\n              return dateFormatter.format(new Date(tooltipItems[0].label));\n            },\n          },\n        },\n        scales: {\n          xAxes: [\n            {\n              ticks: {\n                beginAtZero: false,\n                min: `1/1/${store.initYear}`,\n              },\n              type: \"time\",\n              time: {\n                displayFormats: {\n                  day: \"MM/YYYY\",\n                  week: \"MM/YYYY\",\n                  month: \"MM/YYYY\",\n                  quarter: \"MM/YYYY\",\n                  year: \"YYYY\",\n                },\n                parser: \"MM/DD/YYYY\",\n              },\n              distribution: \"linear\",\n            },\n          ],\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: false,\n                // eslint-disable-next-line no-unused-vars\n                callback: (value, _index, _values) => {\n                  return numFormatter.format(value);\n                },\n              },\n            },\n          ],\n        },\n      }}\n      redraw\n    />\n  );\n}\n\nProjection401k.propTypes = {\n  store: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types\n};\n\nexport default observer(Projection401k);\n","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport PropTypes from \"prop-types\";\nimport { observer } from \"mobx-react\";\n\nimport { numFormatter, dateFormatter } from \"../common/Formatters\";\n\n/**\n *\n * @param {*} props - Passed in properties\n * @returns {ProjectionCombined} - A component to display combined ESOP and 401k projections\n */\nfunction ProjectionCombined(props) {\n  const { store } = props;\n\n  const combinedValuePoints = [];\n  for (let i = 0; i < store.dataPointsESOP.length; i += 1) {\n    combinedValuePoints[i] = {\n      x: store.dataPointsESOP[i].x,\n      y: store.dataPointsESOP[i].y + store.dataPoints401k[i].y,\n    };\n  }\n\n  const data = {\n    datasets: [\n      {\n        label: \"Combined ESOP + 401(k) Value\",\n        fill: false,\n        lineTension: 0.1,\n        data: combinedValuePoints,\n        backgroundColor: \"#26943A\",\n        borderColor: \"#26943A\",\n      },\n      {\n        label: \"ESOP Account Value\",\n        fill: false,\n        steppedLine: true,\n        data: store.dataPointsESOP,\n        backgroundColor: \"#44A3FF\",\n        borderColor: \"#44A3FF\",\n      },\n      {\n        label: \"401(k) Balance\",\n        fill: false,\n        lineTension: 0.1,\n        data: store.dataPoints401k,\n        backgroundColor: \"#F37A0F\",\n        borderColor: \"#F37A0F\",\n      },\n    ],\n  };\n\n  return (\n    <Line\n      data={data}\n      options={{\n        maintainAspectRatio: false,\n        tooltips: {\n          mode: \"x\",\n          intersect: \"false\",\n          callbacks: {\n            // eslint-disable-next-line no-unused-vars\n            label: (tooltipItems, _data) => {\n              let itemLabel = \"\";\n              if (tooltipItems.datasetIndex === 0) {\n                itemLabel = `Combined Employee Retirement Accounts balance: ${numFormatter.format(\n                  Math.trunc(tooltipItems.value)\n                )}`;\n              } else if (tooltipItems.datasetIndex === 1) {\n                itemLabel = `ESOP Account Value: ${numFormatter.format(\n                  Math.trunc(tooltipItems.value)\n                )}`;\n              } else if (tooltipItems.datasetIndex === 2) {\n                itemLabel = `401(k) balance: ${numFormatter.format(\n                  Math.trunc(tooltipItems.value)\n                )}`;\n              }\n              return itemLabel;\n            },\n            // eslint-disable-next-line no-unused-vars\n            title: (tooltipItems, _data) => {\n              return dateFormatter.format(new Date(tooltipItems[0].label));\n            },\n          },\n        },\n        scales: {\n          xAxes: [\n            {\n              ticks: {\n                beginAtZero: false,\n                min: `1/1/${store.initYear}`,\n              },\n              type: \"time\",\n              time: {\n                displayFormats: {\n                  day: \"MM/YYYY\",\n                  week: \"MM/YYYY\",\n                  month: \"MM/YYYY\",\n                  quarter: \"MM/YYYY\",\n                  year: \"YYYY\",\n                },\n                parser: \"MM/DD/YYYY\",\n              },\n              distribution: \"linear\",\n            },\n          ],\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: false,\n                // eslint-disable-next-line no-unused-vars\n                callback: (value, _index, _values) => {\n                  return numFormatter.format(value);\n                },\n              },\n            },\n          ],\n        },\n      }}\n      redraw\n    />\n  );\n}\n\nProjectionCombined.propTypes = {\n  store: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types\n};\n\nexport default observer(ProjectionCombined);\n","import React from \"react\";\nimport { MobXProviderContext } from \"mobx-react\";\n\n/**\n * Hook that returns the mobX stores that were supplied to the MobX Provider component\n * @returns {object} - the mobX stores from the context\n */\nconst useStores = () => {\n  return React.useContext(MobXProviderContext);\n};\n\nexport default useStores;\n","import React from \"react\";\nimport {\n  createMuiTheme,\n  makeStyles,\n  MuiThemeProvider,\n} from \"@material-ui/core/styles\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { observer } from \"mobx-react\";\n\nimport Constants from \"../common/Constants\";\nimport Disclaimer from \"../components/Disclaimer\";\nimport UsageGuide from \"../components/UsageGuide\";\nimport ProjectionInputs from \"../components/ProjectionInputs\";\nimport ProjectionESOP from \"../components/ProjectionESOP\";\nimport Projection401k from \"../components/Projection401k\";\nimport ProjectionCombined from \"../components/ProjectionCombined\";\nimport useStores from \"../stores\";\n\nconst useStyles = makeStyles({\n  flexRoot: {\n    textAlign: \"center\",\n    padding: \"15px 15px 5px 15px\",\n    backgroundColor: \"#F7F7F8\",\n    borderWidth: \"0px\",\n    display: \"flex\",\n    flexFlow: \"column\",\n    height:\"100%\"\n  },\n  flexHeader: {\n    flex: \"0 0 auto\",\n    height: \"100px\",\n    \"@media (max-width: 950px)\": {\n      height: \"120px\"\n    },\n  },\n  flexContent: {\n    flex: \"1 1 auto\"\n  },\n  innerFlex: {\n    display: \"flex\",\n    flexFlow: \"row\",\n    height: \"calc(100vh - 120px)\",\n    width: \"100%\",\n    \"@media (max-width: 950px)\": {\n      flexFlow: \"row wrap\",\n      justifyContent: \"space-around\",\n      height: \"100%\",\n    }\n  },\n  inputs: {\n    display: \"inline-block\",\n    boxSizing: \"border-box\",\n    minWidth: \"300px\",\n    width: \"300px\",\n    maxWidth: \"300px\",\n    verticalAlign: \"top\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    borderWidth: \"0px 1px 0px 0px\",\n    borderStyle: \"solid\",\n    borderColor: \"#AAAEB2\",\n    \"@media (max-width: 950px)\": {\n      width: \"100%\",\n      maxWidth: \"100%\",\n      textAlign: \"center\",\n      borderWidth: \"0px 0px 0px 0px\",\n    },\n    overflowY: \"scroll\",\n  },\n  charts: {\n    display: \"inline-block\",\n    flexGrow: 1,\n    boxSizing: \"border-box\",\n    minWidth: \"475px\",\n    minHeight: \"450px\",\n    maxHeight: \"calc(100vh - 120px)\",\n    verticalAlign: \"top\",\n    paddingLeft: \"2.5%\",\n    paddingRight: \"2.5%\",\n    \"@media (max-width: 950px)\": {\n      height: \"450px\",\n    },\n    overflowY: \"auto\"\n  },\n  chartBox: {\n    flexGrow: 1,\n    boxSizing: \"border-box\",\n    height: \"calc(100vh - 287px)\"\n  },\n  footer: {\n    marginTop: \"10px\",\n    textAlign: \"center\",\n  },\n});\n\nconst App = () => {\n  const classes = useStyles();\n  const { calculatorStore } = useStores();\n\n  return (\n    <MuiThemeProvider\n      theme={createMuiTheme({\n        palette: {\n          type: \"light\",\n          accent: true,\n        },\n        typography: {\n          useNextVariants: true,\n        },\n      })}\n    >\n      {!calculatorStore.acknowledgedDisclaimer && (\n        <Disclaimer store={calculatorStore} />\n      )}\n      <div className={classes.flexRoot}>\n        <div className={classes.flexHeader}>\n          <Typography variant=\"h4\" color=\"primary\">\n            ESOP Retirement Benefits Calculator\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            This is a simple mathematical calculator. It is not a guarantee of\n            future returns. All investments (including the ESOP and 401(k)) are\n            subject to risk. The potential for loss (or gains) may be greater than\n            calculated. This calculator is not intended to provide tax,\n            investment, or legal advice.\n          </Typography>\n          <hr />\n        </div>\n        <div className={classes.flexContent}>\n          <div className={classes.innerFlex}>\n            <div className={classes.inputs}>\n              <ProjectionInputs\n                  data-testid=\"projInputs\"\n                store={calculatorStore}\n              />\n            </div>\n            <div className={classes.charts}>\n              <Tabs\n                data-testid=\"tabSelector\"\n                value={calculatorStore.selectedTab}\n                onChange={calculatorStore.handleTabChange}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                variant=\"scrollable\"\n                scrollButtons=\"auto\"\n                id=\"tabs\"\n              >\n                {calculatorStore.tabs.map((item) => (\n                    <Tab key={item} label={item} disableRipple />\n                ))}\n              </Tabs>\n              <hr />\n              {calculatorStore.selectedTabName === Constants.USAGE_GUIDE && (\n                  <UsageGuide data-testid=\"UsageGuide\" />\n              )}\n              {calculatorStore.selectedTabName === Constants.ESOP_GROWTH && (\n                <Typography\n                  variant=\"caption\"\n                  color=\"textSecondary\"\n                  data-testid=\"capESOP\"\n                >\n                  <i>\n                    This is the calculated growth for an ESOP account based on the\n                    supplied parameters. Its purpose is to help ESOP Employee\n                    Owners visualize the long-term rewards of employee ownership\n                    over the length of their career.\n                  </i>\n                </Typography>\n              )}\n              {calculatorStore.selectedTabName === Constants.ONLY_401K && (\n                <Typography\n                  variant=\"caption\"\n                  color=\"textSecondary\"\n                  data-testid=\"cap401k\"\n                >\n                  <i>\n                    This is the calculated growth for a 401(k) account based\n                    on the supplied parameters. Its purpose is to help\n                    Employee Owners to visualize the growth potential of their own\n                    elective savings over the length of their career.\n                  </i>\n                </Typography>\n              )}\n              {calculatorStore.selectedTabName ===\n                Constants.COMBINED_INVESTMENTS && (\n                <Typography\n                  variant=\"caption\"\n                  color=\"textSecondary\"\n                  data-testid=\"capCombined\"\n                >\n                  <i>\n                    This is the combined calculated retirement savings for an ESOP\n                    account + 401(k) account, based on the supplied parameters. Its\n                    purpose is to empower Employee Owners to better visualize the\n                    benefits that employee ownership provides in planning and\n                    funding their own retirement.\n                  </i>\n                </Typography>\n              )}\n              {calculatorStore.selectedTabName === Constants.ESOP_GROWTH && (\n                  <div className={classes.chartBox}>\n                    <ProjectionESOP data-testid=\"projESOP\" store={calculatorStore} />\n                  </div>\n              )}\n              {calculatorStore.selectedTabName === Constants.ONLY_401K && (\n                  <div className={classes.chartBox}>\n                    <Projection401k data-testid=\"proj401k\" store={calculatorStore} />\n                  </div>\n              )}\n              {calculatorStore.selectedTabName ===\n                Constants.COMBINED_INVESTMENTS && (\n                    <div className={classes.chartBox}>\n                      <ProjectionCombined\n                        data-testid=\"projCombined\"\n                        store={calculatorStore}\n                      />\n                    </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </MuiThemeProvider>\n  );\n};\n\nexport default observer(App);\n","import { getPlanEntryDate, getContributionPercentage } from \"./DateHelpers\";\n\n/**\n * @param {number} count - the given number of years to project\n * @returns {number} - the bounded number if it was outside the allowed range\n */\nfunction getYearCount(count) {\n  let totalYears = 1;\n  if (count < 1) {\n    totalYears = 1;\n  } else if (count > 50) {\n    totalYears = 50;\n  } else {\n    totalYears = count;\n  }\n  return totalYears;\n}\n\n/**\n * @param {number} annualReturn - average annual return\n * @param {number} compoundingPeriods - number of compounding interest periods\n * @returns {number} - the actual APY to use\n */\nfunction getAPY(annualReturn, compoundingPeriods) {\n  return (\n    compoundingPeriods * ((1 + annualReturn) ** (1 / compoundingPeriods) - 1)\n  );\n}\n\n/**\n * @param {number} value - initial value\n * @param {number} decimals - number of decimals to round to\n * @returns {number} - the given number, rounded to the specified number of decimals\n */\nfunction round(value, decimals) {\n  if (value === 0) {\n    return 0;\n  }\n  return Number(`${Math.round(`${value}e${decimals}`)}e-${decimals}`);\n}\n\n/**\n * @param {string} startDate - Employee start date\n * @param {number} initValue - Initial 401k balance\n * @param {number} currentSalary - Current employee salary\n * @param {number} contributionPercentage - contribution percentage\n * @param {number} averageRaise - average employee raise to project\n * @param {number} avgGrowth - Average annual growth to project\n * @param {number} avgFees - Average fees paid per year\n * @param {number} initYear - Initial year to use in the calculations\n * @param {number} totalYears - Total years to calculate\n * @param {number} currentAge - Current age of the employee\n * @returns {Array} - Data points calculated from the input data\n */\nfunction generate401kGrowthData(\n  startDate,\n  initValue,\n  currentSalary,\n  contributionPercentage,\n  averageRaise,\n  avgGrowth,\n  avgFees,\n  initYear,\n  totalYears,\n  currentAge\n) {\n  const dataPoints = [{ y: initValue }];\n  if (initYear <= startDate.getFullYear()) {\n    // Month is +1 because getMonth returns the zero-based month index value.\n    dataPoints[0].x = `${\n      startDate.getMonth() + 1\n    }/${startDate.getDate()}/${startDate.getFullYear()}`;\n  } else {\n    dataPoints[0].x = `1/1/${initYear}`;\n  }\n\n  const years = getYearCount(totalYears);\n  const compoundPerYear = 24;\n  let salary = currentSalary;\n  \n  const calculatedAge = currentAge;\n  let maxContribution = 19500;\n\n  // Compounding monthly, for simplicity\n  const apy = getAPY(avgGrowth - avgFees, compoundPerYear);\n\n  for (let i = 1; i <= years; i += 1) {\n    if (calculatedAge + i > 50) {\n      maxContribution = 26000;\n    }\n\n    const beginningDate = new Date(dataPoints[i-1].x);\n\n    let firstPaycheckIndex = 2 * beginningDate.getMonth(); // 0 if January\n    if (new Date(dataPoints[i - 1].x).getDay() > 15) {\n      firstPaycheckIndex += 1;\n    }\n\n    let lastBalance = dataPoints[i - 1].y;\n\n    for (let j = firstPaycheckIndex; j < compoundPerYear; j += 1) {\n      lastBalance += lastBalance * (apy / compoundPerYear);\n      const rawContribution = (salary / compoundPerYear) * contributionPercentage;\n      if (rawContribution < (maxContribution/compoundPerYear)) {\n        lastBalance += rawContribution;\n      } else {\n        lastBalance += (maxContribution/compoundPerYear);\n      }\n    }\n\n    dataPoints[i] = {\n      x: `1/1/${initYear + i}`,\n      y: round(lastBalance, 2),\n    };\n\n    // increment values\n    salary *= (1 + averageRaise);\n  }\n\n  return dataPoints;\n}\n\n/**\n * @param {string} startDate - Employee start date\n * @param {number} initValue - Initial ESOP Account balance\n * @param {number} avgGrowth - Average annual growth to project\n * @param {number} initSalary - Current employee salary\n * @param {number} avgRaise - Average annual raise to project\n * @param {number} contribution - Average SEL contribution to the ESOP\n * @param {number} inputInitYear - Initial year to use in the calculations\n * @param {number} totalYears - Total years to calculate\n * @returns {Array} - Data points calculated from the input data\n */\nfunction generateESOPGrowthData(\n  startDate,\n  initValue,\n  avgGrowth,\n  initSalary,\n  avgRaise,\n  contribution,\n  inputInitYear,\n  totalYears\n) {\n  const dataPoints = [{}];\n  let initYear = inputInitYear;\n  if (initYear <= startDate.getFullYear()) {\n    initYear = startDate.getFullYear();\n    // Month is +1 because getMonth returns the zero-based month index value.\n    dataPoints[0].x = `${\n      startDate.getMonth() + 1\n    }/${startDate.getDate()}/${startDate.getFullYear()}`;\n  } else {\n    dataPoints[0].x = `1/1/${initYear}`;\n  }\n  dataPoints[0].y = initValue;\n\n  let salary = initSalary;\n\n  for (let i = 1; i <= getYearCount(totalYears); i += 1) {\n\n    // Add the growth component\n    let value = dataPoints[i - 1].y * (1 + avgGrowth);\n\n    // Add the contribution\n    value +=\n      salary *\n      contribution *\n      getContributionPercentage(getPlanEntryDate(startDate), initYear - 1 + i);\n\n    dataPoints[i] = {\n      x: `1/1/${initYear + i}`,\n      y: round(value, 2),\n    };\n\n    // Bump salary for annual raise\n    salary += salary * avgRaise;\n\n  }\n\n  return dataPoints;\n}\n\nexport {\n  generate401kGrowthData,\n  generateESOPGrowthData,\n  getAPY,\n  getYearCount,\n  round,\n};\n","export default {\n  acknowledgedDisclaimer: false,\n  averageAnnual401kFees: 0.19,\n  averageAnnual401kGrowth: 5,\n  averageRaise: 3,\n  averageEmployerESOPContribution: 10,\n  averageShareGrowth: 6,\n  initYear: new Date(Date.now()).getFullYear(),\n  employee401kContribution: 3,\n  selectedTab: 0,\n  startDate: new Date(Date.now()),\n  starting401kBalance: 0,\n  startingSalary: 31200, // 2080 hours at $15.00 per hour\n  startingESOPAccountValue: 0,\n  yearsToCalculate: 30,\n  currentEmployeeAge: 25\n}","import { computed, decorate, observable } from \"mobx\";\nimport {\n  generate401kGrowthData,\n  generateESOPGrowthData,\n} from \"../common/Equations\";\nimport Constants from \"../common/Constants\";\nimport InitialValues from \"../common/Defaults\";\n\n/**\n * The Mobx calculator store\n */\nclass CalculatorStore {\n  acknowledgedDisclaimer = InitialValues.acknowledgedDisclaimer;\n\n  averageAnnual401kFees = InitialValues.averageAnnual401kFees;\n\n  averageAnnual401kGrowth = InitialValues.averageAnnual401kGrowth;\n\n  averageEmployerESOPContribution = InitialValues.averageEmployerESOPContribution;\n\n  averageRaise = InitialValues.averageRaise;\n\n  averageShareGrowth = InitialValues.averageShareGrowth;\n\n  currentEmployeeAge = InitialValues.currentEmployeeAge;\n\n  initYear = InitialValues.initYear;\n\n  employee401kContribution = InitialValues.employee401kContribution;\n\n  selectedTab = InitialValues.selectedTab;\n\n  startDate = InitialValues.startDate;\n\n  starting401kBalance = InitialValues.starting401kBalance;\n\n  startingSalary = InitialValues.startingSalary;\n\n  startingESOPAccountValue = InitialValues.startingESOPAccountValue;\n\n  yearsToCalculate = InitialValues.yearsToCalculate;\n\n  /**\n   * @param {string} setting  - the setting name to update\n   * @param {any} value - The appropriate value to set\n   */\n  handleInputsUpdate = (setting, value) => {\n    this[setting] = value;\n  };\n\n  /**\n   * @param {event} event - Not used\n   * @param {any} value - The index of the tab to select\n   */\n  handleTabChange = (event, value) => {\n    this.selectedTab = value;\n  };\n\n  get dataPoints401k() {\n    return generate401kGrowthData(\n      this.startDate,\n      this.starting401kBalance,\n      this.startingSalary,\n      this.employee401kContribution / 100,\n      this.averageRaise / 100,\n      this.averageAnnual401kGrowth / 100,\n      this.averageAnnual401kFees / 100,\n      this.initYear,\n      this.yearsToCalculate,\n      this.currentEmployeeAge\n    );\n  }\n\n  get dataPointsESOP() {\n    return generateESOPGrowthData(\n      this.startDate,\n      this.startingESOPAccountValue,\n      this.averageShareGrowth / 100,\n      this.startingSalary,\n      this.averageRaise / 100,\n      this.averageEmployerESOPContribution / 100,\n      this.initYear,\n      this.yearsToCalculate\n    );\n  }\n\n  tabs = [\n    Constants.USAGE_GUIDE,\n    Constants.ESOP_GROWTH,\n    Constants.ONLY_401K,\n    Constants.COMBINED_INVESTMENTS,\n  ];\n\n  get selectedTabName() {\n    return this.tabs[this.selectedTab];\n  }\n}\n\ndecorate(CalculatorStore, {\n  dataPoints401k: computed,\n  dataPointsESOP: computed,\n  acknowledgedDisclaimer: observable,\n  averageAnnual401kFees: observable,\n  averageAnnual401kGrowth: observable,\n  averageEmployerESOPContribution: observable,\n  averageRaise: observable,\n  averageShareGrowth: observable,\n  currentEmployeeAge: observable,\n  initYear: observable,\n  employee401kContribution: observable,\n  selectedTab: observable,\n  selectedTabName: computed,\n  startDate: observable,\n  starting401kBalance: observable,\n  startingSalary: observable,\n  startingESOPAccountValue: observable,\n  yearsToCalculate: observable,\n});\n\nconst store = new CalculatorStore();\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"mobx-react\";\nimport \"./index.css\";\nimport App from \"./views/App\";\nimport CalculatorStore from \"./stores/CalculatorStore\";\n\nReactDOM.render(\n  <Provider calculatorStore={CalculatorStore}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}